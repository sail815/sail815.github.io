<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[DjangoWeb部署]]></title>
    <url>%2F2018%2F06%2F19%2FDjangoWeb%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[本文目的：在centos7.x服务器上部署利用nginx和uwsgi(或gunicorn)部署Django应用 环境篇本文使用的服务器是腾讯云的centos7.0 64位，其他的Linux大同小异，部分安装命令自行查询。 新拿到的服务器是以root登陆的，我们先新建一个用户，分配权限。 useradd -m username # 新建用户passwd username # 修改密码usermod -a -G adm usernameusermod -a -G sudo usernameexit # 分配权限后退出退出后已新的用户登陆。 然后安装python3，mysql等等各种组件，一开始装的时候各种问题都有，然后用了@小小Ho 的让Python3.6在Centos7.x上飞一会儿~这里的一键脚本，顺利装完。 wget https://raw.githubusercontent.com/LunacyZeus/Python3.6-for-Centos7.0/master/install.sh &amp;&amp; sh install.sh测试pip安装 python3 -m pip install –upgrade pippython3 -m pip install requests没有报错就是安装好了py3 Django应用从仓库下载代码，本地目录/home/username/myblog，这里假设django应用的文件夹叫myblog，应用的数据库用的是mysql git clone cd myblog 安装虚拟环境python3 -m pip install virtualenvvirtualenv venv. venv/bin/activate 安装依赖文件pip install -r requirements.txt 静态文件处理python manage.py collectstatic接着是数据库迁移 安装好的mysql先设置密码 mysql -u root -p set password for ‘root‘@’localhost’ =password(‘password’);还有设置远程连接的话 grant all privileges on . to root@’%’identified by ‘password’;然后新建django中用到的数据库名，修改setting.py里的密码，就可以进行数据库迁移等。 python manage.py migratepython manage.py createsuperuser….python manage.py runserver 0.0.0.0:8001然后打开服务器的公网查看，可以加载就是work了，但是还没有静态文件的加载。 2.0 uwsgi &amp; nginx关于nginx和uwsgi的作用：nginx uwsgi wsgi django 这些东西究竟是什么关系 这里引用一下。 1，首先nginx 是对外的服务接口，外部浏览器通过url访问nginx。 2，nginx 接收到浏览器发送过来的http请求，将包进行解析，分析url，如果是静态文件请求就直接访问用户给nginx配置的静态文件目录，直接返回用户请求的静态文件，如果不是静态文件，而是一个动态的请求，那么nginx就将请求转发给uwsgi,uwsgi 接收到请求之后将包进行处理，处理成wsgi可以接受的格式，并发给wsgi,wsgi 根据请求调用应用程序的某个文件，某个文件的某个函数，最后处理完将返回值再次交给wsgi,wsgi将返回值进行打包，打包成uwsgi能够接收的格式，uwsgi接收wsgi 发送的请求，并转发给nginx,nginx最终将返回值返回给浏览器。 3，要知道第一级的nginx并不是必须的，uwsgi完全可以完成整个的和浏览器交互的流程，但是要考虑到某些情况 安全问题，程序不能直接被浏览器访问到，而是通过nginx,nginx只开放某个接口，uwsgi本身是内网接口，这样运维人员在nginx上加上安全性的限制，可以达到保护程序的作用。负载均衡问题，一个uwsgi很可能不够用，即使开了多个work也是不行，毕竟一台机器的cpu和内存都是有限的，有了nginx做代理，一个nginx可以代理多台uwsgi完成uwsgi的负载均衡。静态文件问题，用django或是uwsgi这种东西来负责静态文件的处理是很浪费的行为，而且他们本身对文件的处理也不如nginx好，所以整个静态文件的处理都直接由nginx完成，静态文件的访问完全不去经过uwsgi以及其后面的东西。原理： the web client the web server(nginx) the socket uwsgi Django2.1 uwsgi先安装配置uwsgi (venv) pip install uwsgi测试一下是否可用： test.pydef application(env, start_response): start_response(‘200 OK’, [(‘Content-Type’,’text/html’)]) return b”Hello World”运行 uwsgi –http :8000 –wsgi-file test.py打开&lt;公网：8000&gt;看到Hello world就说明已连通 the web client uWSGI Python接着在项目目录下新建uwsgi.ini文件 vim uwsgi.ini[uwsgi] Django-related settingssocket = /tmp/www.wangzhy.com.socket the base directory (full path)chdir = /home/username/myblog Django s wsgi filemodule = blog.wsgi process-related settingsmastermaster = true maximum number of worker processesprocesses = 4 … with appropriate permissions - may be neededchmod-socket = 664clear environment on exitvacuum = true参数的配置文档在此：Python/WSGI 应用快速入门 然后运行： uwsgi –ini uwsgi.ini 后台运行uwsgi –ini mysite_uwsgi.ini –logto mysite.log &amp;打开&lt;服务器公网：8000&gt;就能访问你的网页了。 2.2 nginxcentos的nginx安装：安装Nginx 在 CentOS 7 sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpmyum install nginx 开启systemctl start nginx.service 访问ip可以看到上图就安装成功。 在/etc/nginx/conf.d下新建blog.conf server { listen 80; server_name 127.0.0.1 &lt;yoursite.com&gt;; charset utf-8; client_max_body_size 75M; # media文件夹 location /media { alias /home/username/myblog/media; } # static文件夹 location /static { alias /home/username/myblog/static; } location / { include uwsgi_params; uwsgi_pass unix:/tmp/www.wangzhy.com.socket; } }然后 nginx -t # 检查文件 service nginx restart # 重启nginx然后再把uswgi服务开启就可以访问站点了 uwsgi –ini uwsgi.ini]]></content>
  </entry>
  <entry>
    <title><![CDATA[测试篇]]></title>
    <url>%2F2018%2F06%2F19%2FWeb%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[……….]]></content>
  </entry>
  <entry>
    <title><![CDATA[一份牛逼的简历]]></title>
    <url>%2F2018%2F06%2F18%2F%E2%80%9C%E5%90%90%E6%B8%A9%E2%80%9D%2F</url>
    <content type="text"><![CDATA[要说程序员界最牛逼的简历，莫过于当年 Python 创始人 Guido 去面试 Google 的时候，简历上只写了一句话： I wrote Python. 牛逼吧？不过这牛逼是建立在实力上的，但是 HR 没理解啥意思，以为是说“我写过 Python”，愣是面试了好多轮，才知道这是 Python 的作者，也才明白这句话的意思是：Python 是我写的。 这算是编程界留下的一段佳话了，具体真实性有多少就没必要较真了。 这段佳话说明了，简历写的好只能是锦上添花，但是如果自身没有实力，简历写的再好都是白搭，真正有实力的人，简历不需要过多润色，只要能体现自己实力就好。 最近国外的一个 Bitmex CTO 的简历在网上流传开了，这简历做的叫一个惊艳啊，真正的 Amazing，推荐大家都看下，地址在这里： http://strml.net/]]></content>
  </entry>
</search>
